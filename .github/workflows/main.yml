name: Build and Release

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          # TODO: fix OpenSSL build on aarch64
          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Rust build
        uses: Swatinem/rust-cache@v2
      - name: Install aarch64 cross toolchain
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
      - name: Install missing target
        run: rustup target add ${{ matrix.target }}
      - name: Build binary
        env:
          PKG_CONFIG_ALLOW_CROSS: "1"
        run: cargo build --release --target ${{ matrix.target }} --manifest-path ./cli/Cargo.toml
      - name: Move to dist
        run: mkdir -p dist && mv ./target/${{ matrix.target }}/release/hey${{ matrix.os == 'windows-latest' && '.exe' || '' }} dist/hey-${{ matrix.target }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: hey_cli-${{ matrix.target }}
          path: ./dist

  deploy-server:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Rust build
        uses: Swatinem/rust-cache@v2
      - name: Install missing target
        run: rustup target add x86_64-unknown-linux-gnu
      - name: Build binary
        run: cargo build -p hey-cli-server --release --target x86_64-unknown-linux-gnu
      - name: Build docker container
        run: |
          docker build . -t ghcr.io/zibanpirate/hey-cli-server:latest
        env:
          DOCKER_BUILDKIT: 1
          CR_PAT: ${{ secrets.CR_PAT }}
      - name: Push docker container
        run: |
          echo $CR_PAT | docker login ghcr.io -u zibanpirate --password-stdin
          docker push ghcr.io/zibanpirate/hey-cli-server:latest
        env:
          CR_PAT: ${{ secrets.CR_PAT }}
      - name: install zcluster
        run: curl -fsSL https://infra.zak-man.com/install.sh | sh
      - name: Add zcluster to PATH
        run: echo "/home/runner/.zcluster/bin" >> $GITHUB_PATH
      - name: Deploy to zcluster
        run: zcluster deploy -p hey-cli ./docker-compose.yml
        env:
          ADMIN_AUTH_TOKEN: ${{ secrets.ADMIN_AUTH_TOKEN }}
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
          OPENAI_ORGANIZATION_ID: ${{ secrets.OPENAI_ORGANIZATION_ID }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Get version
        id: get_version
        run: |
          echo "VERSION=$(grep '^version = ' cli/Cargo.toml | cut -d'"' -f2)" >> $GITHUB_OUTPUT
      - name: Check if release exists
        id: check_release
        run: |
          if gh release view v${{ steps.get_version.outputs.VERSION }} &> /dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Download artifacts
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Create draft release
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: dist/**
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          body: |
            Install on macOS or Linux:

            ```sh
            curl -fsSL https://hey-cli.zak-man.com/install.sh | sh
            ```

            Install on Windows:

            ```powershell
            irm https://hey-cli.zak-man.com/install.ps1 | iex
            ```
